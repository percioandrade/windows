# Script para otimizar o Windows 10 em um computador recém-formatado

Function Menu {
    Clear-Host
    Write-Host "Menu de Opções:" -ForegroundColor Cyan
    Write-Host "1 - Otimização do sistema" -ForegroundColor Yellow
    Write-Host "2 - Criar conta de administrador" -ForegroundColor Yellow
    Write-Host "3 - Ativação de recursos" -ForegroundColor Yellow
    Write-Host "0 - Sair" -ForegroundColor Yellow
    $opcao = Read-Host "Escolha uma opção"
    return $opcao
}

Function Otimizacao {
    # 1. Alterar o nome do computador de forma interativa
    $novoNome = Read-Host "Digite o novo nome para o computador"
    Write-Host "Alterando o nome do computador para: $novoNome"
    Rename-Computer -NewName $novoNome -Force

    # 2. Ativar o cache de gravação em sombra no SSD
    Write-Host "Ativando o cache de gravação em sombra no SSD"
    $cachePath = "HKLM:\SYSTEM\CurrentControlSet\Services\iaStorV\Parameters\Device"
    if (Test-Path $cachePath) {
        (Get-ItemProperty -Path $cachePath) | ForEach-Object {
            Set-ItemProperty -Path $_.PSPath -Name "EnableWriteCache" -Value 1
        }
    } else {
        Write-Host "Caminho do registro para cache de gravação não encontrado." -ForegroundColor Red
    }

    # 3. Alterar o plano de energia para Alto Desempenho
    Write-Host "Alterando o plano de energia para Alto Desempenho"
    $powerPlan = Get-CimInstance -Namespace "root\cimv2\power" -ClassName Win32_PowerPlan | Where-Object {$_.ElementName -eq "Alto desempenho"}
    if ($powerPlan) {
        powercfg -setactive $powerPlan.InstanceID
    } else {
        Write-Host "Plano de energia Alto Desempenho não encontrado." -ForegroundColor Red
    }

    # 4. Desativar aplicativos em segundo plano desnecessários
    Write-Host "Desativando aplicativos em segundo plano"
    $backgroundAppsPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\BackgroundAccessApplications"
    if (Test-Path $backgroundAppsPath) {
        Set-ItemProperty -Path $backgroundAppsPath -Name "GlobalUserDisabled" -Value 1
    } else {
        Write-Host "Caminho do registro para aplicativos em segundo plano não encontrado." -ForegroundColor Red
    }

    # 5. Configurar atualizações para reinicialização automática fora do horário ativo
    Write-Host "Configurando atualizações para reinicialização fora do horário ativo"
    $updatePath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
    if (Test-Path $updatePath) {
        Set-ItemProperty -Path $updatePath -Name "AlwaysAutoRebootAtScheduledTime" -Value 1 -Force
    } else {
        Write-Host "Caminho do registro para atualizações não encontrado." -ForegroundColor Red
    }

    # 6. Ativar Limpeza Automática de Disco
    Write-Host "Ativando limpeza automática do disco"
    $TaskName = "LimpezaAutomatica"
    $TaskDescription = "Executa a limpeza de disco automaticamente"
    $TaskAction = New-ScheduledTaskAction -Execute "cleanmgr.exe" -Argument "/sagerun:1"
    $TaskTrigger = New-ScheduledTaskTrigger -Daily -At "3:00AM"
    $TaskPrincipal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount
    Register-ScheduledTask -TaskName $TaskName -Description $TaskDescription -Action $TaskAction -Trigger $TaskTrigger -Principal $TaskPrincipal

    # 7. Habilitar TRIM no SSD
    Write-Host "Habilitando TRIM para otimizar o SSD"
    defrag.exe c: /O

    # 8. Reduzir tempo de espera no menu de boot
    Write-Host "Reduzindo o tempo de espera no menu de boot"
    bcdedit /timeout 5

    # 9. Desabilitar serviços desnecessários
    Write-Host "Desabilitando serviços desnecessários"
    Get-Service -Name "Fax", "bthserv" -ErrorAction SilentlyContinue | ForEach-Object {
        Set-Service -Name $_.Name -StartupType Disabled
    }

    # 10. Configurar o desempenho do Windows mantendo Peek e miniaturas
    Write-Host "Configurando o desempenho do Windows mantendo Peek e miniaturas"
    $performanceKey = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
    New-ItemProperty -Path $performanceKey -Name "VisualFXSetting" -Value 2 -Force

    $peekKey = "HKCU:\Software\Microsoft\Windows\DWM"
    Set-ItemProperty -Path $peekKey -Name "EnableAeroPeek" -Value 1

    # 11. Configurar fontes com cantos arredondados
    Write-Host "Configurando fontes com cantos arredondados"
    $fontKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts"
    if (Test-Path $fontKey) {
        Set-ItemProperty -Path $fontKey -Name "Segoe UI (TrueType)" -Value "Segoe UI Variable Display.ttf"
    } else {
        Write-Host "Caminho do registro para fontes não encontrado." -ForegroundColor Red
    }
}

Function CriarContaAdministrador {
    $userName = Read-Host "Digite o nome da nova conta de administrador"
    $password = Read-Host "Digite a senha para a nova conta" -AsSecureString
    New-LocalUser -Name $userName -Password $password -Description "Conta de administrador criada pelo script" -FullName $userName
    Add-LocalGroupMember -Group "Administradores" -Member $userName
    Write-Host "Conta de administrador $userName criada com sucesso."
}

Function AtivacaoRecursos {
    Write-Host "Função para ativar recursos será adicionada futuramente."
}

Do {
    $opcao = Menu
    Switch ($opcao) {
        1 { Otimizacao }
        2 { CriarContaAdministrador }
        3 { AtivacaoRecursos }
        0 { Write-Host "Saindo..."; Exit }
        Default { Write-Host "Opção inválida, tente novamente." -ForegroundColor Red }
    }
    Pause
} While ($opcao -ne 0)
