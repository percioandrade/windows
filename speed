# Script para otimizar o Windows 10 em um computador recém-formatado

# Função para alterar o nome do computador
function Alterar-NomeComputador {
    $novoNome = Read-Host "Digite o novo nome para o computador"
    Write-Host "Alterando o nome do computador para: $novoNome"
    Rename-Computer -NewName $novoNome -Force
}

# Função para criar uma conta de administrador
function Criar-ContaAdministrador {
    $usuario = Read-Host "Digite o nome do usuário para a conta de administrador"
    $senha = Read-Host "Digite a senha para a conta de administrador" -AsSecureString
    New-LocalUser -Name $usuario -Password $senha -FullName "$usuario (Admin)" -Description "Conta de administrador criada pelo script" -PasswordNeverExpires
    Add-LocalGroupMember -Group "Administrators" -Member $usuario
    Write-Host "Conta de administrador $usuario criada com sucesso."
}

# Função para ativar o cache de gravação em sombra no SSD
function Ativar-CacheSSD {
    Write-Host "Ativando o cache de gravação em sombra no SSD"
    (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\iaStorV\Parameters\Device") | ForEach-Object {
        Set-ItemProperty -Path $_.PSPath -Name "EnableWriteCache" -Value 1
    }
}

# Função para alterar o plano de energia para Alto Desempenho
function Alterar-PlanoEnergia {
    Write-Host "Alterando o plano de energia para Alto Desempenho"
    $powerPlan = Get-CimInstance -Namespace "root\cimv2\power" -ClassName Win32_PowerPlan | Where-Object {$_.ElementName -eq "Alto desempenho"}
    if ($powerPlan) {
        powercfg -setactive $powerPlan.InstanceID
    } else {
        Write-Host "Plano de energia Alto Desempenho não encontrado. Criando novo plano."
        powercfg -duplicatescheme SCHEME_MIN
    }
}

# Função para desativar aplicativos em segundo plano
function Desativar-AppSegundoPlano {
    Write-Host "Desativando aplicativos em segundo plano"
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\BackgroundAccessApplications" -Name "GlobalUserDisabled" -Value 1
}

# Função para configurar atualizações para reinicialização automática fora do horário ativo
function Configurar-Atualizacoes {
    Write-Host "Configurando atualizações para reinicialização fora do horário ativo"
    $path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
    if (!(Test-Path $path)) {
        New-Item -Path $path -Force | Out-Null
    }
    Set-ItemProperty -Path $path -Name "AlwaysAutoRebootAtScheduledTime" -Value 1 -Force
}

# Função para ativar limpeza automática de disco
function Ativar-LimpezaDisco {
    Write-Host "Ativando limpeza automática do disco"
    $TaskName = "LimpezaAutomatica"
    $TaskDescription = "Executa a limpeza de disco automaticamente"
    $TaskAction = New-ScheduledTaskAction -Execute "cleanmgr.exe" -Argument "/sagerun:1"
    $TaskTrigger = New-ScheduledTaskTrigger -Daily -At "3:00AM"
    $TaskPrincipal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount
    
    $existingTask = Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue
    if ($existingTask) {
        Set-ScheduledTask -TaskName $TaskName -Action $TaskAction -Trigger $TaskTrigger -Principal $TaskPrincipal
    } else {
        Register-ScheduledTask -TaskName $TaskName -Description $TaskDescription -Action $TaskAction -Trigger $TaskTrigger -Principal $TaskPrincipal
    }
}

# Função para habilitar TRIM no SSD
function Ativar-TRIM {
    Write-Host "Habilitando TRIM para otimizar o SSD"
    fsutil behavior set disabledeletenotify 0
}

# Função para reduzir tempo de espera no menu de boot
function Reduzir-TempoBoot {
    Write-Host "Reduzindo o tempo de espera no menu de boot"
    bcdedit /timeout 5
}

# Função para desabilitar serviços desnecessários
function Desabilitar-Servicos {
    Write-Host "Desabilitando serviços desnecessários"
    Set-Service -Name "Fax" -StartupType Disabled
    Set-Service -Name "bthserv" -StartupType Disabled
}

# Função para configurar desempenho mantendo Peek e miniaturas
function Configurar-Desempenho {
    Write-Host "Configurando o desempenho do Windows mantendo Peek e miniaturas"
    $performanceKey = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
    New-ItemProperty -Path $performanceKey -Name "VisualFXSetting" -Value 2 -Force

    $peekKey = "HKCU:\Software\Microsoft\Windows\DWM"
    Set-ItemProperty -Path $peekKey -Name "EnableAeroPeek" -Value 1
}

# Função para configurar fontes com cantos arredondados
function Configurar-Fontes {
    Write-Host "Configurando fontes com cantos arredondados"
    $fontKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts"
    Set-ItemProperty -Path $fontKey -Name "Segoe UI (TrueType)" -Value "Segoe UI Variable Display.ttf"
}

# Menu principal
function Menu {
    Clear-Host
    Write-Host "Menu de Opções:"
    Write-Host "1 - Otimização do sistema"
    Write-Host "2 - Criar conta de administrador"
    Write-Host "3 - Ativação de recursos"
    Write-Host "0 - Sair"

    $opcao = Read-Host "Escolha uma opção"

    switch ($opcao) {
        1 {
            Alterar-NomeComputador
            Ativar-CacheSSD
            Alterar-PlanoEnergia
            Desativar-AppSegundoPlano
            Configurar-Atualizacoes
            Ativar-LimpezaDisco
            Ativar-TRIM
            Reduzir-TempoBoot
            Desabilitar-Servicos
            Configurar-Desempenho
            Configurar-Fontes
        }
        2 {
            Criar-ContaAdministrador
        }
        3 {
            Write-Host "Função de ativação de recursos ainda não implementada."
        }
        0 {
            Write-Host "Saindo do script."
            return
        }
        default {
            Write-Host "Opção inválida. Tente novamente."
        }
    }

    Pause
    Menu
}

# Executar o script como administrador
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))  
{  
    $arguments = "& '" + $myinvocation.mycommand.definition + "'"
    Start-Process powershell -Verb runAs -ArgumentList $arguments
    Exit
}

Menu

